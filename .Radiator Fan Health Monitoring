import pandas as pd
import datetime
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, confusion_matrix

# Sample dataset
data = {
    'runtime_hours': [200, 350, 120, 450, 600, 180, 300],
    'avg_vibration': [0.9, 1.2, 0.8, 1.5, 1.6, 0.85, 1.1],
    'peak_vibration': [1.1, 1.8, 1.0, 2.2, 2.5, 1.0, 1.6],
    'failure': [0, 1, 0, 1, 1, 0, 1]
}

df = pd.DataFrame(data)

# Features and labels
X = df[['runtime_hours', 'avg_vibration', 'peak_vibration']]
y = df['failure']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.3, random_state=42
)

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train logistic regression model
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# Evaluate the model
y_pred = model.predict(X_test_scaled)
print("ðŸ“Š Model Evaluation Report:\n")
print(classification_report(y_test, y_pred))
print("ðŸ§¾ Confusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Predict motor health for multiple new examples
new_motors = pd.DataFrame([
    [250, 1.3, 1.7],
    [150, 0.9, 1.1],
    [500, 1.6, 2.3],
    [220, 1.0, 1.2]
], columns=['runtime_hours', 'avg_vibration', 'peak_vibration'])

# Add timestamp for each prediction
new_motors['timestamp'] = datetime.datetime.now()

# Scale new data and make predictions
new_scaled = scaler.transform(new_motors[['runtime_hours', 'avg_vibration', 'peak_vibration']])
predictions = model.predict(new_scaled)
probabilities = model.predict_proba(new_scaled)[:, 1]

# Append predictions and health status
new_motors['failure_predicted'] = predictions
new_motors['failure_probability'] = probabilities
new_motors['health_status'] = new_motors['failure_predicted'].apply(
    lambda x: "âš  Low â€“ Inspect Bearing" if x == 1 else "âœ… Good â€“ Running Smoothly"
)

# Display individual predictions
print("\nðŸ“‹ Motor Health Summary:\n")
for idx, row in new_motors.iterrows():
    print(f"Motor {idx+1} | Runtime: {row['runtime_hours']} hrs | "
          f"Failure Probability: {row['failure_probability']:.2f} | "
          f"Status: {row['health_status']}")

# Save to CSV
output_path = "motor_health_predictions.csv"
new_motors.to_csv(output_path, index=False)
print(f"\nâœ… Predictions saved to: {output_path}")
